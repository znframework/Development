name: PHPUnit

on:
  push:
    branches:
      - develop
      - '6.*'
    paths:
      - 'External/**'
      - 'Internal/**'
      - 'Projects/**'
      - 'Settings/**'
      - 'UnitTests/**'
      - composer.json
      - DockerFile
      - docker-compose.yml
      - zerocore 
      - '**.php'
      - phpunit.xml.dist
      - .github/workflows/phpunit.yml
  pull_request:
    branches:
      - develop
      - '6.*'
    paths:
      - 'External/**'
      - 'Internal/**'
      - 'Projects/**'
      - 'Settings/**'
      - 'UnitTests/**'
      - composer.json
      - DockerFile
      - docker-compose.yml
      - zerocore 
      - '**.php'
      - phpunit.xml.dist
      - .github/workflows/phpunit.yml

jobs:
  tests:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: PHP ${{ matrix.php-versions }} - ${{ matrix.db-platforms }}

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.2', '7.3', '7.4', '8.0']
        db-platforms: ['MySQLi', 'Postgre', 'SQLite3']

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pecl
          extensions: imagick, sqlsrv-beta
          coverage: xdebug
        env:
          update: true

      - name: Install Memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer update --ansi --no-interaction
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      - name: Test with PHPUnit
        run: script -e -c "vendor/bin/phpunit -v"
        env:
          DB: ${{ matrix.db-platforms }}
          TERM: xterm-256color

      - if: matrix.php-versions == '7.4'
        name: Run Coveralls
        run: |
          composer global require php-coveralls/php-coveralls:^2.4
          php-coveralls --coverage_clover=build/logs/clover.xml -v
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: true
          COVERALLS_FLAG_NAME: PHP ${{ matrix.php-versions }} - ${{ matrix.db-platforms }}

  coveralls-finish:
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true